// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyteidl/plugins/sagemaker/training_job.proto

package plugins

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InputMode_Value int32

const (
	InputMode_FILE InputMode_Value = 0
	InputMode_PIPE InputMode_Value = 1
)

// Enum value maps for InputMode_Value.
var (
	InputMode_Value_name = map[int32]string{
		0: "FILE",
		1: "PIPE",
	}
	InputMode_Value_value = map[string]int32{
		"FILE": 0,
		"PIPE": 1,
	}
)

func (x InputMode_Value) Enum() *InputMode_Value {
	p := new(InputMode_Value)
	*p = x
	return p
}

func (x InputMode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputMode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[0].Descriptor()
}

func (InputMode_Value) Type() protoreflect.EnumType {
	return &file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[0]
}

func (x InputMode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputMode_Value.Descriptor instead.
func (InputMode_Value) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{0, 0}
}

type AlgorithmName_Value int32

const (
	AlgorithmName_CUSTOM  AlgorithmName_Value = 0
	AlgorithmName_XGBOOST AlgorithmName_Value = 1
)

// Enum value maps for AlgorithmName_Value.
var (
	AlgorithmName_Value_name = map[int32]string{
		0: "CUSTOM",
		1: "XGBOOST",
	}
	AlgorithmName_Value_value = map[string]int32{
		"CUSTOM":  0,
		"XGBOOST": 1,
	}
)

func (x AlgorithmName_Value) Enum() *AlgorithmName_Value {
	p := new(AlgorithmName_Value)
	*p = x
	return p
}

func (x AlgorithmName_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgorithmName_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[1].Descriptor()
}

func (AlgorithmName_Value) Type() protoreflect.EnumType {
	return &file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[1]
}

func (x AlgorithmName_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlgorithmName_Value.Descriptor instead.
func (AlgorithmName_Value) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{1, 0}
}

type InputContentType_Value int32

const (
	InputContentType_TEXT_CSV InputContentType_Value = 0
)

// Enum value maps for InputContentType_Value.
var (
	InputContentType_Value_name = map[int32]string{
		0: "TEXT_CSV",
	}
	InputContentType_Value_value = map[string]int32{
		"TEXT_CSV": 0,
	}
)

func (x InputContentType_Value) Enum() *InputContentType_Value {
	p := new(InputContentType_Value)
	*p = x
	return p
}

func (x InputContentType_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputContentType_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[2].Descriptor()
}

func (InputContentType_Value) Type() protoreflect.EnumType {
	return &file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[2]
}

func (x InputContentType_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputContentType_Value.Descriptor instead.
func (InputContentType_Value) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{2, 0}
}

type DistributedProtocol_Value int32

const (
	// Use this value if the user wishes to use framework-native distributed training interfaces.
	// If this value is used, Flyte won't configure SageMaker to initialize unnecessary components such as
	// OpenMPI or Parameter Server.
	DistributedProtocol_UNSPECIFIED DistributedProtocol_Value = 0
	// Use this value if the user wishes to use MPI as the underlying protocol for her distributed training job
	// MPI is a framework-agnostic distributed protocol. It has multiple implementations. Currently, we have only
	// tested the OpenMPI implementation, which is the recommended implementation for Horovod.
	DistributedProtocol_MPI DistributedProtocol_Value = 1
)

// Enum value maps for DistributedProtocol_Value.
var (
	DistributedProtocol_Value_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MPI",
	}
	DistributedProtocol_Value_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MPI":         1,
	}
)

func (x DistributedProtocol_Value) Enum() *DistributedProtocol_Value {
	p := new(DistributedProtocol_Value)
	*p = x
	return p
}

func (x DistributedProtocol_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributedProtocol_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[3].Descriptor()
}

func (DistributedProtocol_Value) Type() protoreflect.EnumType {
	return &file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes[3]
}

func (x DistributedProtocol_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributedProtocol_Value.Descriptor instead.
func (DistributedProtocol_Value) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{5, 0}
}

// The input mode that the algorithm supports. When using the File input mode, SageMaker downloads
// the training data from S3 to the provisioned ML storage Volume, and mounts the directory to docker
// volume for training container. When using Pipe input mode, Amazon SageMaker streams data directly
// from S3 to the container.
// See: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html
// For the input modes that different SageMaker algorithms support, see:
// https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html
type InputMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputMode) Reset() {
	*x = InputMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputMode) ProtoMessage() {}

func (x *InputMode) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputMode.ProtoReflect.Descriptor instead.
func (*InputMode) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{0}
}

// The algorithm name is used for deciding which pre-built image to point to.
// This is only required for use cases where SageMaker's built-in algorithm mode is used.
// While we currently only support a subset of the algorithms, more will be added to the list.
// See: https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html
type AlgorithmName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlgorithmName) Reset() {
	*x = AlgorithmName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmName) ProtoMessage() {}

func (x *AlgorithmName) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmName.ProtoReflect.Descriptor instead.
func (*AlgorithmName) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{1}
}

// Specifies the type of file for input data. Different SageMaker built-in algorithms require different file types of input data
// See https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html
// https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html
type InputContentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputContentType) Reset() {
	*x = InputContentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputContentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContentType) ProtoMessage() {}

func (x *InputContentType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContentType.ProtoReflect.Descriptor instead.
func (*InputContentType) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{2}
}

// Specifies a metric that the training algorithm writes to stderr or stdout.
// This object is a pass-through.
// See this for details: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html
type MetricDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-defined name of the metric
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SageMaker hyperparameter tuning parses your algorithm’s stdout and stderr streams to find algorithm metrics
	Regex string `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *MetricDefinition) Reset() {
	*x = MetricDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDefinition) ProtoMessage() {}

func (x *MetricDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDefinition.ProtoReflect.Descriptor instead.
func (*MetricDefinition) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{3}
}

func (x *MetricDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDefinition) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

// Specifies the training algorithm to be used in the training job
// This object is mostly a pass-through, with a couple of exceptions include: (1) in Flyte, users don't need to specify
// TrainingImage; either use the built-in algorithm mode by using Flytekit's Simple Training Job and specifying an algorithm
// name and an algorithm version or (2) when users want to supply custom algorithms they should set algorithm_name field to
// CUSTOM. In this case, the value of the algorithm_version field has no effect
// For pass-through use cases: refer to this AWS official document for more details
// https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html
type AlgorithmSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input mode can be either PIPE or FILE
	InputMode InputMode_Value `protobuf:"varint,1,opt,name=input_mode,json=inputMode,proto3,enum=flyteidl.plugins.sagemaker.InputMode_Value" json:"input_mode,omitempty"`
	// The algorithm name is used for deciding which pre-built image to point to
	AlgorithmName AlgorithmName_Value `protobuf:"varint,2,opt,name=algorithm_name,json=algorithmName,proto3,enum=flyteidl.plugins.sagemaker.AlgorithmName_Value" json:"algorithm_name,omitempty"`
	// The algorithm version field is used for deciding which pre-built image to point to
	// This is only needed for use cases where SageMaker's built-in algorithm mode is chosen
	AlgorithmVersion string `protobuf:"bytes,3,opt,name=algorithm_version,json=algorithmVersion,proto3" json:"algorithm_version,omitempty"`
	// A list of metric definitions for SageMaker to evaluate/track on the progress of the training job
	// See this: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html
	// and this: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics.html
	MetricDefinitions []*MetricDefinition `protobuf:"bytes,4,rep,name=metric_definitions,json=metricDefinitions,proto3" json:"metric_definitions,omitempty"`
	// The content type of the input
	// See https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-training.html
	// https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html
	InputContentType InputContentType_Value `protobuf:"varint,5,opt,name=input_content_type,json=inputContentType,proto3,enum=flyteidl.plugins.sagemaker.InputContentType_Value" json:"input_content_type,omitempty"`
}

func (x *AlgorithmSpecification) Reset() {
	*x = AlgorithmSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlgorithmSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmSpecification) ProtoMessage() {}

func (x *AlgorithmSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmSpecification.ProtoReflect.Descriptor instead.
func (*AlgorithmSpecification) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{4}
}

func (x *AlgorithmSpecification) GetInputMode() InputMode_Value {
	if x != nil {
		return x.InputMode
	}
	return InputMode_FILE
}

func (x *AlgorithmSpecification) GetAlgorithmName() AlgorithmName_Value {
	if x != nil {
		return x.AlgorithmName
	}
	return AlgorithmName_CUSTOM
}

func (x *AlgorithmSpecification) GetAlgorithmVersion() string {
	if x != nil {
		return x.AlgorithmVersion
	}
	return ""
}

func (x *AlgorithmSpecification) GetMetricDefinitions() []*MetricDefinition {
	if x != nil {
		return x.MetricDefinitions
	}
	return nil
}

func (x *AlgorithmSpecification) GetInputContentType() InputContentType_Value {
	if x != nil {
		return x.InputContentType
	}
	return InputContentType_TEXT_CSV
}

// When enabling distributed training on a training job, the user should use this message to tell Flyte and SageMaker
// what kind of distributed protocol he/she wants to use to distribute the work.
type DistributedProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DistributedProtocol) Reset() {
	*x = DistributedProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributedProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributedProtocol) ProtoMessage() {}

func (x *DistributedProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributedProtocol.ProtoReflect.Descriptor instead.
func (*DistributedProtocol) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{5}
}

// TrainingJobResourceConfig is a pass-through, specifying the instance type to use for the training job, the
// number of instances to launch, and the size of the ML storage volume the user wants to provision
// Refer to SageMaker official doc for more details: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html
type TrainingJobResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of ML compute instances to use. For distributed training, provide a value greater than 1.
	InstanceCount int64 `protobuf:"varint,1,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	// The ML compute instance type
	InstanceType string `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// The size of the ML storage volume that you want to provision.
	VolumeSizeInGb int64 `protobuf:"varint,3,opt,name=volume_size_in_gb,json=volumeSizeInGb,proto3" json:"volume_size_in_gb,omitempty"`
	// When users specify an instance_count > 1, Flyte will try to configure SageMaker to enable distributed training.
	// If the users wish to use framework-agnostic distributed protocol such as MPI or Parameter Server, this
	// field should be set to the corresponding enum value
	DistributedProtocol DistributedProtocol_Value `protobuf:"varint,4,opt,name=distributed_protocol,json=distributedProtocol,proto3,enum=flyteidl.plugins.sagemaker.DistributedProtocol_Value" json:"distributed_protocol,omitempty"`
}

func (x *TrainingJobResourceConfig) Reset() {
	*x = TrainingJobResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingJobResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingJobResourceConfig) ProtoMessage() {}

func (x *TrainingJobResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingJobResourceConfig.ProtoReflect.Descriptor instead.
func (*TrainingJobResourceConfig) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{6}
}

func (x *TrainingJobResourceConfig) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *TrainingJobResourceConfig) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *TrainingJobResourceConfig) GetVolumeSizeInGb() int64 {
	if x != nil {
		return x.VolumeSizeInGb
	}
	return 0
}

func (x *TrainingJobResourceConfig) GetDistributedProtocol() DistributedProtocol_Value {
	if x != nil {
		return x.DistributedProtocol
	}
	return DistributedProtocol_UNSPECIFIED
}

// The spec of a training job. This is mostly a pass-through object
// https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html
type TrainingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlgorithmSpecification    *AlgorithmSpecification    `protobuf:"bytes,1,opt,name=algorithm_specification,json=algorithmSpecification,proto3" json:"algorithm_specification,omitempty"`
	TrainingJobResourceConfig *TrainingJobResourceConfig `protobuf:"bytes,2,opt,name=training_job_resource_config,json=trainingJobResourceConfig,proto3" json:"training_job_resource_config,omitempty"`
}

func (x *TrainingJob) Reset() {
	*x = TrainingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingJob) ProtoMessage() {}

func (x *TrainingJob) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingJob.ProtoReflect.Descriptor instead.
func (*TrainingJob) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP(), []int{7}
}

func (x *TrainingJob) GetAlgorithmSpecification() *AlgorithmSpecification {
	if x != nil {
		return x.AlgorithmSpecification
	}
	return nil
}

func (x *TrainingJob) GetTrainingJobResourceConfig() *TrainingJobResourceConfig {
	if x != nil {
		return x.TrainingJobResourceConfig
	}
	return nil
}

var File_flyteidl_plugins_sagemaker_training_job_proto protoreflect.FileDescriptor

var file_flyteidl_plugins_sagemaker_training_job_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x49, 0x50, 0x45, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x58,
	0x47, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x53,
	0x56, 0x10, 0x00, 0x22, 0x3c, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x22, 0xa8, 0x03, 0x0a, 0x16, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a,
	0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67,
	0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x13,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0x21, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x50, 0x49, 0x10, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x68, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67,
	0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x6b, 0x0a, 0x17, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x19, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xf5, 0x01, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x10, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x46, 0x50, 0x53,
	0xaa, 0x02, 0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0xca, 0x02, 0x1a,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x5c, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0xe2, 0x02, 0x26, 0x46, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x53, 0x61,
	0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x3a, 0x3a, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_plugins_sagemaker_training_job_proto_rawDescOnce sync.Once
	file_flyteidl_plugins_sagemaker_training_job_proto_rawDescData = file_flyteidl_plugins_sagemaker_training_job_proto_rawDesc
)

func file_flyteidl_plugins_sagemaker_training_job_proto_rawDescGZIP() []byte {
	file_flyteidl_plugins_sagemaker_training_job_proto_rawDescOnce.Do(func() {
		file_flyteidl_plugins_sagemaker_training_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_plugins_sagemaker_training_job_proto_rawDescData)
	})
	return file_flyteidl_plugins_sagemaker_training_job_proto_rawDescData
}

var file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_flyteidl_plugins_sagemaker_training_job_proto_goTypes = []interface{}{
	(InputMode_Value)(0),              // 0: flyteidl.plugins.sagemaker.InputMode.Value
	(AlgorithmName_Value)(0),          // 1: flyteidl.plugins.sagemaker.AlgorithmName.Value
	(InputContentType_Value)(0),       // 2: flyteidl.plugins.sagemaker.InputContentType.Value
	(DistributedProtocol_Value)(0),    // 3: flyteidl.plugins.sagemaker.DistributedProtocol.Value
	(*InputMode)(nil),                 // 4: flyteidl.plugins.sagemaker.InputMode
	(*AlgorithmName)(nil),             // 5: flyteidl.plugins.sagemaker.AlgorithmName
	(*InputContentType)(nil),          // 6: flyteidl.plugins.sagemaker.InputContentType
	(*MetricDefinition)(nil),          // 7: flyteidl.plugins.sagemaker.MetricDefinition
	(*AlgorithmSpecification)(nil),    // 8: flyteidl.plugins.sagemaker.AlgorithmSpecification
	(*DistributedProtocol)(nil),       // 9: flyteidl.plugins.sagemaker.DistributedProtocol
	(*TrainingJobResourceConfig)(nil), // 10: flyteidl.plugins.sagemaker.TrainingJobResourceConfig
	(*TrainingJob)(nil),               // 11: flyteidl.plugins.sagemaker.TrainingJob
}
var file_flyteidl_plugins_sagemaker_training_job_proto_depIdxs = []int32{
	0,  // 0: flyteidl.plugins.sagemaker.AlgorithmSpecification.input_mode:type_name -> flyteidl.plugins.sagemaker.InputMode.Value
	1,  // 1: flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name:type_name -> flyteidl.plugins.sagemaker.AlgorithmName.Value
	7,  // 2: flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions:type_name -> flyteidl.plugins.sagemaker.MetricDefinition
	2,  // 3: flyteidl.plugins.sagemaker.AlgorithmSpecification.input_content_type:type_name -> flyteidl.plugins.sagemaker.InputContentType.Value
	3,  // 4: flyteidl.plugins.sagemaker.TrainingJobResourceConfig.distributed_protocol:type_name -> flyteidl.plugins.sagemaker.DistributedProtocol.Value
	8,  // 5: flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification:type_name -> flyteidl.plugins.sagemaker.AlgorithmSpecification
	10, // 6: flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config:type_name -> flyteidl.plugins.sagemaker.TrainingJobResourceConfig
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_flyteidl_plugins_sagemaker_training_job_proto_init() }
func file_flyteidl_plugins_sagemaker_training_job_proto_init() {
	if File_flyteidl_plugins_sagemaker_training_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputContentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlgorithmSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributedProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingJobResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_plugins_sagemaker_training_job_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_plugins_sagemaker_training_job_proto_goTypes,
		DependencyIndexes: file_flyteidl_plugins_sagemaker_training_job_proto_depIdxs,
		EnumInfos:         file_flyteidl_plugins_sagemaker_training_job_proto_enumTypes,
		MessageInfos:      file_flyteidl_plugins_sagemaker_training_job_proto_msgTypes,
	}.Build()
	File_flyteidl_plugins_sagemaker_training_job_proto = out.File
	file_flyteidl_plugins_sagemaker_training_job_proto_rawDesc = nil
	file_flyteidl_plugins_sagemaker_training_job_proto_goTypes = nil
	file_flyteidl_plugins_sagemaker_training_job_proto_depIdxs = nil
}
