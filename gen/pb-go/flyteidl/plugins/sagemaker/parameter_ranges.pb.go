// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyteidl/plugins/sagemaker/parameter_ranges.proto

package plugins

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperparameterScalingType_Value int32

const (
	HyperparameterScalingType_AUTO               HyperparameterScalingType_Value = 0
	HyperparameterScalingType_LINEAR             HyperparameterScalingType_Value = 1
	HyperparameterScalingType_LOGARITHMIC        HyperparameterScalingType_Value = 2
	HyperparameterScalingType_REVERSELOGARITHMIC HyperparameterScalingType_Value = 3
)

// Enum value maps for HyperparameterScalingType_Value.
var (
	HyperparameterScalingType_Value_name = map[int32]string{
		0: "AUTO",
		1: "LINEAR",
		2: "LOGARITHMIC",
		3: "REVERSELOGARITHMIC",
	}
	HyperparameterScalingType_Value_value = map[string]int32{
		"AUTO":               0,
		"LINEAR":             1,
		"LOGARITHMIC":        2,
		"REVERSELOGARITHMIC": 3,
	}
)

func (x HyperparameterScalingType_Value) Enum() *HyperparameterScalingType_Value {
	p := new(HyperparameterScalingType_Value)
	*p = x
	return p
}

func (x HyperparameterScalingType_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperparameterScalingType_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_enumTypes[0].Descriptor()
}

func (HyperparameterScalingType_Value) Type() protoreflect.EnumType {
	return &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_enumTypes[0]
}

func (x HyperparameterScalingType_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperparameterScalingType_Value.Descriptor instead.
func (HyperparameterScalingType_Value) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{0, 0}
}

// HyperparameterScalingType defines the way to increase or decrease the value of the hyperparameter
// For details, refer to: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
// See examples of these scaling type, refer to: https://aws.amazon.com/blogs/machine-learning/amazon-sagemaker-automatic-model-tuning-now-supports-random-search-and-hyperparameter-scaling/
type HyperparameterScalingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperparameterScalingType) Reset() {
	*x = HyperparameterScalingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperparameterScalingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperparameterScalingType) ProtoMessage() {}

func (x *HyperparameterScalingType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperparameterScalingType.ProtoReflect.Descriptor instead.
func (*HyperparameterScalingType) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{0}
}

// ContinuousParameterRange refers to a continuous range of hyperparameter values, allowing
// users to specify the search space of a floating-point hyperparameter
// https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
type ContinuousParameterRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxValue    float64                         `protobuf:"fixed64,1,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinValue    float64                         `protobuf:"fixed64,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	ScalingType HyperparameterScalingType_Value `protobuf:"varint,3,opt,name=scaling_type,json=scalingType,proto3,enum=flyteidl.plugins.sagemaker.HyperparameterScalingType_Value" json:"scaling_type,omitempty"`
}

func (x *ContinuousParameterRange) Reset() {
	*x = ContinuousParameterRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousParameterRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousParameterRange) ProtoMessage() {}

func (x *ContinuousParameterRange) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousParameterRange.ProtoReflect.Descriptor instead.
func (*ContinuousParameterRange) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{1}
}

func (x *ContinuousParameterRange) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ContinuousParameterRange) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ContinuousParameterRange) GetScalingType() HyperparameterScalingType_Value {
	if x != nil {
		return x.ScalingType
	}
	return HyperparameterScalingType_AUTO
}

// IntegerParameterRange refers to a discrete range of hyperparameter values, allowing
// users to specify the search space of an integer hyperparameter
// https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
type IntegerParameterRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxValue    int64                           `protobuf:"varint,1,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinValue    int64                           `protobuf:"varint,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	ScalingType HyperparameterScalingType_Value `protobuf:"varint,3,opt,name=scaling_type,json=scalingType,proto3,enum=flyteidl.plugins.sagemaker.HyperparameterScalingType_Value" json:"scaling_type,omitempty"`
}

func (x *IntegerParameterRange) Reset() {
	*x = IntegerParameterRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerParameterRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerParameterRange) ProtoMessage() {}

func (x *IntegerParameterRange) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerParameterRange.ProtoReflect.Descriptor instead.
func (*IntegerParameterRange) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{2}
}

func (x *IntegerParameterRange) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *IntegerParameterRange) GetMinValue() int64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *IntegerParameterRange) GetScalingType() HyperparameterScalingType_Value {
	if x != nil {
		return x.ScalingType
	}
	return HyperparameterScalingType_AUTO
}

// ContinuousParameterRange refers to a continuous range of hyperparameter values, allowing
// users to specify the search space of a floating-point hyperparameter
// https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
type CategoricalParameterRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CategoricalParameterRange) Reset() {
	*x = CategoricalParameterRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalParameterRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalParameterRange) ProtoMessage() {}

func (x *CategoricalParameterRange) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalParameterRange.ProtoReflect.Descriptor instead.
func (*CategoricalParameterRange) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{3}
}

func (x *CategoricalParameterRange) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// ParameterRangeOneOf describes a single ParameterRange, which is a one-of structure that can be one of
// the three possible types: ContinuousParameterRange, IntegerParameterRange, and CategoricalParameterRange.
// This one-of structure in Flyte enables specifying a Parameter in a type-safe manner
// See: https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
type ParameterRangeOneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ParameterRangeType:
	//	*ParameterRangeOneOf_ContinuousParameterRange
	//	*ParameterRangeOneOf_IntegerParameterRange
	//	*ParameterRangeOneOf_CategoricalParameterRange
	ParameterRangeType isParameterRangeOneOf_ParameterRangeType `protobuf_oneof:"parameter_range_type"`
}

func (x *ParameterRangeOneOf) Reset() {
	*x = ParameterRangeOneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterRangeOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterRangeOneOf) ProtoMessage() {}

func (x *ParameterRangeOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterRangeOneOf.ProtoReflect.Descriptor instead.
func (*ParameterRangeOneOf) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{4}
}

func (m *ParameterRangeOneOf) GetParameterRangeType() isParameterRangeOneOf_ParameterRangeType {
	if m != nil {
		return m.ParameterRangeType
	}
	return nil
}

func (x *ParameterRangeOneOf) GetContinuousParameterRange() *ContinuousParameterRange {
	if x, ok := x.GetParameterRangeType().(*ParameterRangeOneOf_ContinuousParameterRange); ok {
		return x.ContinuousParameterRange
	}
	return nil
}

func (x *ParameterRangeOneOf) GetIntegerParameterRange() *IntegerParameterRange {
	if x, ok := x.GetParameterRangeType().(*ParameterRangeOneOf_IntegerParameterRange); ok {
		return x.IntegerParameterRange
	}
	return nil
}

func (x *ParameterRangeOneOf) GetCategoricalParameterRange() *CategoricalParameterRange {
	if x, ok := x.GetParameterRangeType().(*ParameterRangeOneOf_CategoricalParameterRange); ok {
		return x.CategoricalParameterRange
	}
	return nil
}

type isParameterRangeOneOf_ParameterRangeType interface {
	isParameterRangeOneOf_ParameterRangeType()
}

type ParameterRangeOneOf_ContinuousParameterRange struct {
	ContinuousParameterRange *ContinuousParameterRange `protobuf:"bytes,1,opt,name=continuous_parameter_range,json=continuousParameterRange,proto3,oneof"`
}

type ParameterRangeOneOf_IntegerParameterRange struct {
	IntegerParameterRange *IntegerParameterRange `protobuf:"bytes,2,opt,name=integer_parameter_range,json=integerParameterRange,proto3,oneof"`
}

type ParameterRangeOneOf_CategoricalParameterRange struct {
	CategoricalParameterRange *CategoricalParameterRange `protobuf:"bytes,3,opt,name=categorical_parameter_range,json=categoricalParameterRange,proto3,oneof"`
}

func (*ParameterRangeOneOf_ContinuousParameterRange) isParameterRangeOneOf_ParameterRangeType() {}

func (*ParameterRangeOneOf_IntegerParameterRange) isParameterRangeOneOf_ParameterRangeType() {}

func (*ParameterRangeOneOf_CategoricalParameterRange) isParameterRangeOneOf_ParameterRangeType() {}

// ParameterRanges is a map that maps hyperparameter name to the corresponding hyperparameter range
// https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html
type ParameterRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterRangeMap map[string]*ParameterRangeOneOf `protobuf:"bytes,1,rep,name=parameter_range_map,json=parameterRangeMap,proto3" json:"parameter_range_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParameterRanges) Reset() {
	*x = ParameterRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterRanges) ProtoMessage() {}

func (x *ParameterRanges) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterRanges.ProtoReflect.Descriptor instead.
func (*ParameterRanges) Descriptor() ([]byte, []int) {
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP(), []int{5}
}

func (x *ParameterRanges) GetParameterRangeMap() map[string]*ParameterRangeOneOf {
	if x != nil {
		return x.ParameterRangeMap
	}
	return nil
}

var File_flyteidl_plugins_sagemaker_parameter_ranges_proto protoreflect.FileDescriptor

var file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDesc = []byte{
	0x0a, 0x31, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x22,
	0x63, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x4f, 0x47, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x4c, 0x4f, 0x47, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x49, 0x43, 0x10, 0x03, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5e, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x33, 0x0a, 0x19, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x74, 0x0a, 0x1a,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x77, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x75, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0xf9, 0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x42, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d,
	0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x46, 0x50, 0x53, 0xaa, 0x02, 0x1a, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x61, 0x67,
	0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0xca, 0x02, 0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x5c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0xe2, 0x02, 0x26, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x3a, 0x3a, 0x53, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescOnce sync.Once
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescData = file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDesc
)

func file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescGZIP() []byte {
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescOnce.Do(func() {
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescData)
	})
	return file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDescData
}

var file_flyteidl_plugins_sagemaker_parameter_ranges_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_flyteidl_plugins_sagemaker_parameter_ranges_proto_goTypes = []interface{}{
	(HyperparameterScalingType_Value)(0), // 0: flyteidl.plugins.sagemaker.HyperparameterScalingType.Value
	(*HyperparameterScalingType)(nil),    // 1: flyteidl.plugins.sagemaker.HyperparameterScalingType
	(*ContinuousParameterRange)(nil),     // 2: flyteidl.plugins.sagemaker.ContinuousParameterRange
	(*IntegerParameterRange)(nil),        // 3: flyteidl.plugins.sagemaker.IntegerParameterRange
	(*CategoricalParameterRange)(nil),    // 4: flyteidl.plugins.sagemaker.CategoricalParameterRange
	(*ParameterRangeOneOf)(nil),          // 5: flyteidl.plugins.sagemaker.ParameterRangeOneOf
	(*ParameterRanges)(nil),              // 6: flyteidl.plugins.sagemaker.ParameterRanges
	nil,                                  // 7: flyteidl.plugins.sagemaker.ParameterRanges.ParameterRangeMapEntry
}
var file_flyteidl_plugins_sagemaker_parameter_ranges_proto_depIdxs = []int32{
	0, // 0: flyteidl.plugins.sagemaker.ContinuousParameterRange.scaling_type:type_name -> flyteidl.plugins.sagemaker.HyperparameterScalingType.Value
	0, // 1: flyteidl.plugins.sagemaker.IntegerParameterRange.scaling_type:type_name -> flyteidl.plugins.sagemaker.HyperparameterScalingType.Value
	2, // 2: flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range:type_name -> flyteidl.plugins.sagemaker.ContinuousParameterRange
	3, // 3: flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range:type_name -> flyteidl.plugins.sagemaker.IntegerParameterRange
	4, // 4: flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range:type_name -> flyteidl.plugins.sagemaker.CategoricalParameterRange
	7, // 5: flyteidl.plugins.sagemaker.ParameterRanges.parameter_range_map:type_name -> flyteidl.plugins.sagemaker.ParameterRanges.ParameterRangeMapEntry
	5, // 6: flyteidl.plugins.sagemaker.ParameterRanges.ParameterRangeMapEntry.value:type_name -> flyteidl.plugins.sagemaker.ParameterRangeOneOf
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_flyteidl_plugins_sagemaker_parameter_ranges_proto_init() }
func file_flyteidl_plugins_sagemaker_parameter_ranges_proto_init() {
	if File_flyteidl_plugins_sagemaker_parameter_ranges_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperparameterScalingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousParameterRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerParameterRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalParameterRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterRangeOneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ParameterRangeOneOf_ContinuousParameterRange)(nil),
		(*ParameterRangeOneOf_IntegerParameterRange)(nil),
		(*ParameterRangeOneOf_CategoricalParameterRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_plugins_sagemaker_parameter_ranges_proto_goTypes,
		DependencyIndexes: file_flyteidl_plugins_sagemaker_parameter_ranges_proto_depIdxs,
		EnumInfos:         file_flyteidl_plugins_sagemaker_parameter_ranges_proto_enumTypes,
		MessageInfos:      file_flyteidl_plugins_sagemaker_parameter_ranges_proto_msgTypes,
	}.Build()
	File_flyteidl_plugins_sagemaker_parameter_ranges_proto = out.File
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_rawDesc = nil
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_goTypes = nil
	file_flyteidl_plugins_sagemaker_parameter_ranges_proto_depIdxs = nil
}
