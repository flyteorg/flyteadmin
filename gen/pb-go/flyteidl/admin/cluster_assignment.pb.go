// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyteidl/admin/cluster_assignment.proto

package admin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines how a label with a corresponding key and value is selected or excluded.
type Selector_Operator int32

const (
	Selector_EQUALS     Selector_Operator = 0
	Selector_NOT_EQUALS Selector_Operator = 1
	Selector_IN         Selector_Operator = 2
	Selector_NOT_IN     Selector_Operator = 3
	Selector_EXISTS     Selector_Operator = 4 // A label key with any value
)

// Enum value maps for Selector_Operator.
var (
	Selector_Operator_name = map[int32]string{
		0: "EQUALS",
		1: "NOT_EQUALS",
		2: "IN",
		3: "NOT_IN",
		4: "EXISTS",
	}
	Selector_Operator_value = map[string]int32{
		"EQUALS":     0,
		"NOT_EQUALS": 1,
		"IN":         2,
		"NOT_IN":     3,
		"EXISTS":     4,
	}
)

func (x Selector_Operator) Enum() *Selector_Operator {
	p := new(Selector_Operator)
	*p = x
	return p
}

func (x Selector_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Selector_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_admin_cluster_assignment_proto_enumTypes[0].Descriptor()
}

func (Selector_Operator) Type() protoreflect.EnumType {
	return &file_flyteidl_admin_cluster_assignment_proto_enumTypes[0]
}

func (x Selector_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Selector_Operator.Descriptor instead.
func (Selector_Operator) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP(), []int{3, 0}
}

// Encapsulates specifications for routing an execution onto a specific cluster.
type ClusterAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affinity   *Affinity   `protobuf:"bytes,1,opt,name=affinity,proto3" json:"affinity,omitempty"`
	Toleration *Toleration `protobuf:"bytes,2,opt,name=toleration,proto3" json:"toleration,omitempty"`
}

func (x *ClusterAssignment) Reset() {
	*x = ClusterAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAssignment) ProtoMessage() {}

func (x *ClusterAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAssignment.ProtoReflect.Descriptor instead.
func (*ClusterAssignment) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterAssignment) GetAffinity() *Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *ClusterAssignment) GetToleration() *Toleration {
	if x != nil {
		return x.Toleration
	}
	return nil
}

// Defines a set of constraints used to select eligible objects based on labels they possess.
type Affinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multiples selectors are 'and'-ed together to produce the list of matching, eligible objects.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *Affinity) Reset() {
	*x = Affinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Affinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Affinity) ProtoMessage() {}

func (x *Affinity) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Affinity.ProtoReflect.Descriptor instead.
func (*Affinity) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP(), []int{1}
}

func (x *Affinity) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

// Defines a set of specific label selectors that the execution can tolerate on a cluster.
type Toleration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP(), []int{2}
}

func (x *Toleration) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

// A Selector is a specification for identifying a set of objects with corresponding labels.
type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// One or more values used to match labels.
	// For equality (or inequality) requirements, values must contain a single element.
	// For set-based requirements, values may contain one or more elements.
	Value    []string          `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	Operator Selector_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=flyteidl.admin.Selector_Operator" json:"operator,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_cluster_assignment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP(), []int{3}
}

func (x *Selector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Selector) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Selector) GetOperator() Selector_Operator {
	if x != nil {
		return x.Operator
	}
	return Selector_EQUALS
}

var File_flyteidl_admin_cluster_assignment_proto protoreflect.FileDescriptor

var file_flyteidl_admin_cluster_assignment_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x42, 0x0a, 0x08, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x0a, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x46, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x42, 0xbc, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x16,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f,
	0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xa2,
	0x02, 0x03, 0x46, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xca, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xe2, 0x02, 0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a,
	0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_admin_cluster_assignment_proto_rawDescOnce sync.Once
	file_flyteidl_admin_cluster_assignment_proto_rawDescData = file_flyteidl_admin_cluster_assignment_proto_rawDesc
)

func file_flyteidl_admin_cluster_assignment_proto_rawDescGZIP() []byte {
	file_flyteidl_admin_cluster_assignment_proto_rawDescOnce.Do(func() {
		file_flyteidl_admin_cluster_assignment_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_admin_cluster_assignment_proto_rawDescData)
	})
	return file_flyteidl_admin_cluster_assignment_proto_rawDescData
}

var file_flyteidl_admin_cluster_assignment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flyteidl_admin_cluster_assignment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_flyteidl_admin_cluster_assignment_proto_goTypes = []interface{}{
	(Selector_Operator)(0),    // 0: flyteidl.admin.Selector.Operator
	(*ClusterAssignment)(nil), // 1: flyteidl.admin.ClusterAssignment
	(*Affinity)(nil),          // 2: flyteidl.admin.Affinity
	(*Toleration)(nil),        // 3: flyteidl.admin.Toleration
	(*Selector)(nil),          // 4: flyteidl.admin.Selector
}
var file_flyteidl_admin_cluster_assignment_proto_depIdxs = []int32{
	2, // 0: flyteidl.admin.ClusterAssignment.affinity:type_name -> flyteidl.admin.Affinity
	3, // 1: flyteidl.admin.ClusterAssignment.toleration:type_name -> flyteidl.admin.Toleration
	4, // 2: flyteidl.admin.Affinity.selectors:type_name -> flyteidl.admin.Selector
	4, // 3: flyteidl.admin.Toleration.selectors:type_name -> flyteidl.admin.Selector
	0, // 4: flyteidl.admin.Selector.operator:type_name -> flyteidl.admin.Selector.Operator
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_flyteidl_admin_cluster_assignment_proto_init() }
func file_flyteidl_admin_cluster_assignment_proto_init() {
	if File_flyteidl_admin_cluster_assignment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_admin_cluster_assignment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_cluster_assignment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Affinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_cluster_assignment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toleration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_cluster_assignment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_admin_cluster_assignment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_admin_cluster_assignment_proto_goTypes,
		DependencyIndexes: file_flyteidl_admin_cluster_assignment_proto_depIdxs,
		EnumInfos:         file_flyteidl_admin_cluster_assignment_proto_enumTypes,
		MessageInfos:      file_flyteidl_admin_cluster_assignment_proto_msgTypes,
	}.Build()
	File_flyteidl_admin_cluster_assignment_proto = out.File
	file_flyteidl_admin_cluster_assignment_proto_rawDesc = nil
	file_flyteidl_admin_cluster_assignment_proto_goTypes = nil
	file_flyteidl_admin_cluster_assignment_proto_depIdxs = nil
}
