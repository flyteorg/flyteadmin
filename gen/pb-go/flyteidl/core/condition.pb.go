// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyteidl/core/condition.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Binary Operator for each expression
type ComparisonExpression_Operator int32

const (
	ComparisonExpression_EQ  ComparisonExpression_Operator = 0
	ComparisonExpression_NEQ ComparisonExpression_Operator = 1
	// Greater Than
	ComparisonExpression_GT  ComparisonExpression_Operator = 2
	ComparisonExpression_GTE ComparisonExpression_Operator = 3
	// Less Than
	ComparisonExpression_LT  ComparisonExpression_Operator = 4
	ComparisonExpression_LTE ComparisonExpression_Operator = 5
)

// Enum value maps for ComparisonExpression_Operator.
var (
	ComparisonExpression_Operator_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "GT",
		3: "GTE",
		4: "LT",
		5: "LTE",
	}
	ComparisonExpression_Operator_value = map[string]int32{
		"EQ":  0,
		"NEQ": 1,
		"GT":  2,
		"GTE": 3,
		"LT":  4,
		"LTE": 5,
	}
)

func (x ComparisonExpression_Operator) Enum() *ComparisonExpression_Operator {
	p := new(ComparisonExpression_Operator)
	*p = x
	return p
}

func (x ComparisonExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_core_condition_proto_enumTypes[0].Descriptor()
}

func (ComparisonExpression_Operator) Type() protoreflect.EnumType {
	return &file_flyteidl_core_condition_proto_enumTypes[0]
}

func (x ComparisonExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonExpression_Operator.Descriptor instead.
func (ComparisonExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{0, 0}
}

// Nested conditions. They can be conjoined using AND / OR
// Order of evaluation is not important as the operators are Commutative
type ConjunctionExpression_LogicalOperator int32

const (
	// Conjunction
	ConjunctionExpression_AND ConjunctionExpression_LogicalOperator = 0
	ConjunctionExpression_OR  ConjunctionExpression_LogicalOperator = 1
)

// Enum value maps for ConjunctionExpression_LogicalOperator.
var (
	ConjunctionExpression_LogicalOperator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	ConjunctionExpression_LogicalOperator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x ConjunctionExpression_LogicalOperator) Enum() *ConjunctionExpression_LogicalOperator {
	p := new(ConjunctionExpression_LogicalOperator)
	*p = x
	return p
}

func (x ConjunctionExpression_LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConjunctionExpression_LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_core_condition_proto_enumTypes[1].Descriptor()
}

func (ConjunctionExpression_LogicalOperator) Type() protoreflect.EnumType {
	return &file_flyteidl_core_condition_proto_enumTypes[1]
}

func (x ConjunctionExpression_LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConjunctionExpression_LogicalOperator.Descriptor instead.
func (ConjunctionExpression_LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{3, 0}
}

// Defines a 2-level tree where the root is a comparison operator and Operands are primitives or known variables.
// Each expression results in a boolean result.
type ComparisonExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator   ComparisonExpression_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=flyteidl.core.ComparisonExpression_Operator" json:"operator,omitempty"`
	LeftValue  *Operand                      `protobuf:"bytes,2,opt,name=left_value,json=leftValue,proto3" json:"left_value,omitempty"`
	RightValue *Operand                      `protobuf:"bytes,3,opt,name=right_value,json=rightValue,proto3" json:"right_value,omitempty"`
}

func (x *ComparisonExpression) Reset() {
	*x = ComparisonExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonExpression) ProtoMessage() {}

func (x *ComparisonExpression) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonExpression.ProtoReflect.Descriptor instead.
func (*ComparisonExpression) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{0}
}

func (x *ComparisonExpression) GetOperator() ComparisonExpression_Operator {
	if x != nil {
		return x.Operator
	}
	return ComparisonExpression_EQ
}

func (x *ComparisonExpression) GetLeftValue() *Operand {
	if x != nil {
		return x.LeftValue
	}
	return nil
}

func (x *ComparisonExpression) GetRightValue() *Operand {
	if x != nil {
		return x.RightValue
	}
	return nil
}

// Defines an operand to a comparison expression.
type Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//	*Operand_Primitive
	//	*Operand_Var
	Val isOperand_Val `protobuf_oneof:"val"`
}

func (x *Operand) Reset() {
	*x = Operand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operand) ProtoMessage() {}

func (x *Operand) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operand.ProtoReflect.Descriptor instead.
func (*Operand) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{1}
}

func (m *Operand) GetVal() isOperand_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *Operand) GetPrimitive() *Primitive {
	if x, ok := x.GetVal().(*Operand_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Operand) GetVar() string {
	if x, ok := x.GetVal().(*Operand_Var); ok {
		return x.Var
	}
	return ""
}

type isOperand_Val interface {
	isOperand_Val()
}

type Operand_Primitive struct {
	// Can be a constant
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Operand_Var struct {
	// Or one of this node's input variables
	Var string `protobuf:"bytes,2,opt,name=var,proto3,oneof"`
}

func (*Operand_Primitive) isOperand_Val() {}

func (*Operand_Var) isOperand_Val() {}

// Defines a boolean expression tree. It can be a simple or a conjunction expression.
// Multiple expressions can be combined using a conjunction or a disjunction to result in a final boolean result.
type BooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//	*BooleanExpression_Conjunction
	//	*BooleanExpression_Comparison
	Expr isBooleanExpression_Expr `protobuf_oneof:"expr"`
}

func (x *BooleanExpression) Reset() {
	*x = BooleanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanExpression) ProtoMessage() {}

func (x *BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanExpression.ProtoReflect.Descriptor instead.
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{2}
}

func (m *BooleanExpression) GetExpr() isBooleanExpression_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *BooleanExpression) GetConjunction() *ConjunctionExpression {
	if x, ok := x.GetExpr().(*BooleanExpression_Conjunction); ok {
		return x.Conjunction
	}
	return nil
}

func (x *BooleanExpression) GetComparison() *ComparisonExpression {
	if x, ok := x.GetExpr().(*BooleanExpression_Comparison); ok {
		return x.Comparison
	}
	return nil
}

type isBooleanExpression_Expr interface {
	isBooleanExpression_Expr()
}

type BooleanExpression_Conjunction struct {
	Conjunction *ConjunctionExpression `protobuf:"bytes,1,opt,name=conjunction,proto3,oneof"`
}

type BooleanExpression_Comparison struct {
	Comparison *ComparisonExpression `protobuf:"bytes,2,opt,name=comparison,proto3,oneof"`
}

func (*BooleanExpression_Conjunction) isBooleanExpression_Expr() {}

func (*BooleanExpression_Comparison) isBooleanExpression_Expr() {}

// Defines a conjunction expression of two boolean expressions.
type ConjunctionExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator        ConjunctionExpression_LogicalOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=flyteidl.core.ConjunctionExpression_LogicalOperator" json:"operator,omitempty"`
	LeftExpression  *BooleanExpression                    `protobuf:"bytes,2,opt,name=left_expression,json=leftExpression,proto3" json:"left_expression,omitempty"`
	RightExpression *BooleanExpression                    `protobuf:"bytes,3,opt,name=right_expression,json=rightExpression,proto3" json:"right_expression,omitempty"`
}

func (x *ConjunctionExpression) Reset() {
	*x = ConjunctionExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConjunctionExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConjunctionExpression) ProtoMessage() {}

func (x *ConjunctionExpression) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConjunctionExpression.ProtoReflect.Descriptor instead.
func (*ConjunctionExpression) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_condition_proto_rawDescGZIP(), []int{3}
}

func (x *ConjunctionExpression) GetOperator() ConjunctionExpression_LogicalOperator {
	if x != nil {
		return x.Operator
	}
	return ConjunctionExpression_AND
}

func (x *ConjunctionExpression) GetLeftExpression() *BooleanExpression {
	if x != nil {
		return x.LeftExpression
	}
	return nil
}

func (x *ConjunctionExpression) GetRightExpression() *BooleanExpression {
	if x != nil {
		return x.RightExpression
	}
	return nil
}

var File_flyteidl_core_condition_proto protoreflect.FileDescriptor

var file_flyteidl_core_condition_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1c,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x47, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x05, 0x22, 0x5e,
	0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x76, 0x61, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xa5, 0x02,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x22, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x52, 0x10, 0x01, 0x42, 0xae, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x46, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0xca, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0xe2, 0x02, 0x19, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_core_condition_proto_rawDescOnce sync.Once
	file_flyteidl_core_condition_proto_rawDescData = file_flyteidl_core_condition_proto_rawDesc
)

func file_flyteidl_core_condition_proto_rawDescGZIP() []byte {
	file_flyteidl_core_condition_proto_rawDescOnce.Do(func() {
		file_flyteidl_core_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_core_condition_proto_rawDescData)
	})
	return file_flyteidl_core_condition_proto_rawDescData
}

var file_flyteidl_core_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flyteidl_core_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_flyteidl_core_condition_proto_goTypes = []interface{}{
	(ComparisonExpression_Operator)(0),         // 0: flyteidl.core.ComparisonExpression.Operator
	(ConjunctionExpression_LogicalOperator)(0), // 1: flyteidl.core.ConjunctionExpression.LogicalOperator
	(*ComparisonExpression)(nil),               // 2: flyteidl.core.ComparisonExpression
	(*Operand)(nil),                            // 3: flyteidl.core.Operand
	(*BooleanExpression)(nil),                  // 4: flyteidl.core.BooleanExpression
	(*ConjunctionExpression)(nil),              // 5: flyteidl.core.ConjunctionExpression
	(*Primitive)(nil),                          // 6: flyteidl.core.Primitive
}
var file_flyteidl_core_condition_proto_depIdxs = []int32{
	0, // 0: flyteidl.core.ComparisonExpression.operator:type_name -> flyteidl.core.ComparisonExpression.Operator
	3, // 1: flyteidl.core.ComparisonExpression.left_value:type_name -> flyteidl.core.Operand
	3, // 2: flyteidl.core.ComparisonExpression.right_value:type_name -> flyteidl.core.Operand
	6, // 3: flyteidl.core.Operand.primitive:type_name -> flyteidl.core.Primitive
	5, // 4: flyteidl.core.BooleanExpression.conjunction:type_name -> flyteidl.core.ConjunctionExpression
	2, // 5: flyteidl.core.BooleanExpression.comparison:type_name -> flyteidl.core.ComparisonExpression
	1, // 6: flyteidl.core.ConjunctionExpression.operator:type_name -> flyteidl.core.ConjunctionExpression.LogicalOperator
	4, // 7: flyteidl.core.ConjunctionExpression.left_expression:type_name -> flyteidl.core.BooleanExpression
	4, // 8: flyteidl.core.ConjunctionExpression.right_expression:type_name -> flyteidl.core.BooleanExpression
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_flyteidl_core_condition_proto_init() }
func file_flyteidl_core_condition_proto_init() {
	if File_flyteidl_core_condition_proto != nil {
		return
	}
	file_flyteidl_core_literals_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_core_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConjunctionExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl_core_condition_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Operand_Primitive)(nil),
		(*Operand_Var)(nil),
	}
	file_flyteidl_core_condition_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BooleanExpression_Conjunction)(nil),
		(*BooleanExpression_Comparison)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_core_condition_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_core_condition_proto_goTypes,
		DependencyIndexes: file_flyteidl_core_condition_proto_depIdxs,
		EnumInfos:         file_flyteidl_core_condition_proto_enumTypes,
		MessageInfos:      file_flyteidl_core_condition_proto_msgTypes,
	}.Build()
	File_flyteidl_core_condition_proto = out.File
	file_flyteidl_core_condition_proto_rawDesc = nil
	file_flyteidl_core_condition_proto_goTypes = nil
	file_flyteidl_core_condition_proto_depIdxs = nil
}
