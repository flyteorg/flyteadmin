// Code generated by "enumer --type=DomainMatch --trimprefix=DomainMatch -json"; DO NOT EDIT.

//
package config

import (
	"encoding/json"
	"fmt"
)

const _DomainMatchName = "ExactSubdomains"

var _DomainMatchIndex = [...]uint8{0, 5, 15}

func (i DomainMatch) String() string {
	if i < 0 || i >= DomainMatch(len(_DomainMatchIndex)-1) {
		return fmt.Sprintf("DomainMatch(%d)", i)
	}
	return _DomainMatchName[_DomainMatchIndex[i]:_DomainMatchIndex[i+1]]
}

var _DomainMatchValues = []DomainMatch{0, 1}

var _DomainMatchNameToValueMap = map[string]DomainMatch{
	_DomainMatchName[0:5]:  0,
	_DomainMatchName[5:15]: 1,
}

// DomainMatchString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DomainMatchString(s string) (DomainMatch, error) {
	if val, ok := _DomainMatchNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DomainMatch values", s)
}

// DomainMatchValues returns all values of the enum
func DomainMatchValues() []DomainMatch {
	return _DomainMatchValues
}

// IsADomainMatch returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DomainMatch) IsADomainMatch() bool {
	for _, v := range _DomainMatchValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DomainMatch
func (i DomainMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DomainMatch
func (i *DomainMatch) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DomainMatch should be a string, got %s", data)
	}

	var err error
	*i, err = DomainMatchString(s)
	return err
}
