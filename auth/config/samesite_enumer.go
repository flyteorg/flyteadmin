// Code generated by "enumer --type=SameSite --trimprefix=SameSite -json"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

const _SameSiteName = "DefaultModeLaxModeStrictModeNoneMode"

var _SameSiteIndex = [...]uint8{0, 11, 18, 28, 36}

func (i SameSite) String() string {
	if i < 0 || i >= SameSite(len(_SameSiteIndex)-1) {
		return fmt.Sprintf("SameSite(%d)", i)
	}
	return _SameSiteName[_SameSiteIndex[i]:_SameSiteIndex[i+1]]
}

var _SameSiteValues = []SameSite{0, 1, 2, 3}

var _SameSiteNameToValueMap = map[string]SameSite{
	_SameSiteName[0:11]:  0,
	_SameSiteName[11:18]: 1,
	_SameSiteName[18:28]: 2,
	_SameSiteName[28:36]: 3,
}

// SameSiteString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SameSiteString(s string) (SameSite, error) {
	if val, ok := _SameSiteNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SameSite values", s)
}

// SameSiteValues returns all values of the enum
func SameSiteValues() []SameSite {
	return _SameSiteValues
}

// IsASameSite returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SameSite) IsASameSite() bool {
	for _, v := range _SameSiteValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SameSite
func (i SameSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SameSite
func (i *SameSite) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SameSite should be a string, got %s", data)
	}

	var err error
	*i, err = SameSiteString(s)
	return err
}
