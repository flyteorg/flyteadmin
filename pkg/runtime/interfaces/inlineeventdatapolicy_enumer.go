// Code generated by "enumer -type=InlineEventDataPolicy -trimprefix=InlineEventDataPolicy"; DO NOT EDIT.

package interfaces

import (
	"fmt"
)

const _InlineEventDataPolicyName = "OffloadStoreInline"

var _InlineEventDataPolicyIndex = [...]uint8{0, 7, 18}

func (i InlineEventDataPolicy) String() string {
	if i < 0 || i >= InlineEventDataPolicy(len(_InlineEventDataPolicyIndex)-1) {
		return fmt.Sprintf("InlineEventDataPolicy(%d)", i)
	}
	return _InlineEventDataPolicyName[_InlineEventDataPolicyIndex[i]:_InlineEventDataPolicyIndex[i+1]]
}

var _InlineEventDataPolicyValues = []InlineEventDataPolicy{0, 1}

var _InlineEventDataPolicyNameToValueMap = map[string]InlineEventDataPolicy{
	_InlineEventDataPolicyName[0:7]:  0,
	_InlineEventDataPolicyName[7:18]: 1,
}

// InlineEventDataPolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InlineEventDataPolicyString(s string) (InlineEventDataPolicy, error) {
	if val, ok := _InlineEventDataPolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InlineEventDataPolicy values", s)
}

// InlineEventDataPolicyValues returns all values of the enum
func InlineEventDataPolicyValues() []InlineEventDataPolicy {
	return _InlineEventDataPolicyValues
}

// IsAInlineEventDataPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InlineEventDataPolicy) IsAInlineEventDataPolicy() bool {
	for _, v := range _InlineEventDataPolicyValues {
		if i == v {
			return true
		}
	}
	return false
}
