// Code generated by "enumer --type=ArtifactType --trimprefix=ArtifactType -transform=snake"; DO NOT EDIT.

package common

import (
	"fmt"
)

const _ArtifactTypeName = "undefinediod"

var _ArtifactTypeIndex = [...]uint8{0, 9, 10, 11, 12}

func (i ArtifactType) String() string {
	if i < 0 || i >= ArtifactType(len(_ArtifactTypeIndex)-1) {
		return fmt.Sprintf("ArtifactType(%d)", i)
	}
	return _ArtifactTypeName[_ArtifactTypeIndex[i]:_ArtifactTypeIndex[i+1]]
}

var _ArtifactTypeValues = []ArtifactType{0, 1, 2, 3}

var _ArtifactTypeNameToValueMap = map[string]ArtifactType{
	_ArtifactTypeName[0:9]:   0,
	_ArtifactTypeName[9:10]:  1,
	_ArtifactTypeName[10:11]: 2,
	_ArtifactTypeName[11:12]: 3,
}

// ArtifactTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ArtifactTypeString(s string) (ArtifactType, error) {
	if val, ok := _ArtifactTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ArtifactType values", s)
}

// ArtifactTypeValues returns all values of the enum
func ArtifactTypeValues() []ArtifactType {
	return _ArtifactTypeValues
}

// IsAArtifactType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ArtifactType) IsAArtifactType() bool {
	for _, v := range _ArtifactTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
