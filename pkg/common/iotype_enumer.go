// Code generated by "enumer --type=IOType --trimprefix=IOType_"; DO NOT EDIT.

package common

import (
	"fmt"
)

const _IOTypeName = "undefinediod"

var _IOTypeIndex = [...]uint8{0, 9, 10, 11, 12}

func (i IOType) String() string {
	if i < 0 || i >= IOType(len(_IOTypeIndex)-1) {
		return fmt.Sprintf("IOType(%d)", i)
	}
	return _IOTypeName[_IOTypeIndex[i]:_IOTypeIndex[i+1]]
}

var _IOTypeValues = []IOType{0, 1, 2, 3}

var _IOTypeNameToValueMap = map[string]IOType{
	_IOTypeName[0:9]:   0,
	_IOTypeName[9:10]:  1,
	_IOTypeName[10:11]: 2,
	_IOTypeName[11:12]: 3,
}

// IOTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IOTypeString(s string) (IOType, error) {
	if val, ok := _IOTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IOType values", s)
}

// IOTypeValues returns all values of the enum
func IOTypeValues() []IOType {
	return _IOTypeValues
}

// IsAIOType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IOType) IsAIOType() bool {
	for _, v := range _IOTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
