// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// VersionInterface is an autogenerated mock type for the VersionInterface type
type VersionInterface struct {
	mock.Mock
}

type VersionInterface_GetVersion struct {
	*mock.Call
}

func (_m VersionInterface_GetVersion) Return(_a0 *admin.GetVersionResponse, _a1 error) *VersionInterface_GetVersion {
	return &VersionInterface_GetVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *VersionInterface) OnGetVersion(ctx context.Context, r *admin.GetVersionRequest) *VersionInterface_GetVersion {
	c := _m.On("GetVersion", ctx, r)
	return &VersionInterface_GetVersion{Call: c}
}

func (_m *VersionInterface) OnGetVersionMatch(matchers ...interface{}) *VersionInterface_GetVersion {
	c := _m.On("GetVersion", matchers...)
	return &VersionInterface_GetVersion{Call: c}
}

// GetVersion provides a mock function with given fields: ctx, r
func (_m *VersionInterface) GetVersion(ctx context.Context, r *admin.GetVersionRequest) (*admin.GetVersionResponse, error) {
	ret := _m.Called(ctx, r)

	var r0 *admin.GetVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest) *admin.GetVersionResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetVersionRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
