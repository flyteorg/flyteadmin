// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// MetricsInterface is an autogenerated mock type for the MetricsInterface type
type MetricsInterface struct {
	mock.Mock
}

type MetricsInterface_GetExecutionMetrics struct {
	*mock.Call
}

func (_m MetricsInterface_GetExecutionMetrics) Return(_a0 *admin.WorkflowExecutionGetMetricsResponse, _a1 error) *MetricsInterface_GetExecutionMetrics {
	return &MetricsInterface_GetExecutionMetrics{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *MetricsInterface) OnGetExecutionMetrics(ctx context.Context, request admin.WorkflowExecutionGetMetricsRequest) *MetricsInterface_GetExecutionMetrics {
	c_call := _m.On("GetExecutionMetrics", ctx, request)
	return &MetricsInterface_GetExecutionMetrics{Call: c_call}
}

func (_m *MetricsInterface) OnGetExecutionMetricsMatch(matchers ...interface{}) *MetricsInterface_GetExecutionMetrics {
	c_call := _m.On("GetExecutionMetrics", matchers...)
	return &MetricsInterface_GetExecutionMetrics{Call: c_call}
}

// GetExecutionMetrics provides a mock function with given fields: ctx, request
func (_m *MetricsInterface) GetExecutionMetrics(ctx context.Context, request admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *admin.WorkflowExecutionGetMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, admin.WorkflowExecutionGetMetricsRequest) *admin.WorkflowExecutionGetMetricsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionGetMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admin.WorkflowExecutionGetMetricsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type MetricsInterface_GetNodeExecutionMetrics struct {
	*mock.Call
}

func (_m MetricsInterface_GetNodeExecutionMetrics) Return(_a0 *admin.NodeExecutionGetMetricsResponse, _a1 error) *MetricsInterface_GetNodeExecutionMetrics {
	return &MetricsInterface_GetNodeExecutionMetrics{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *MetricsInterface) OnGetNodeExecutionMetrics(ctx context.Context, request admin.NodeExecutionGetMetricsRequest) *MetricsInterface_GetNodeExecutionMetrics {
	c_call := _m.On("GetNodeExecutionMetrics", ctx, request)
	return &MetricsInterface_GetNodeExecutionMetrics{Call: c_call}
}

func (_m *MetricsInterface) OnGetNodeExecutionMetricsMatch(matchers ...interface{}) *MetricsInterface_GetNodeExecutionMetrics {
	c_call := _m.On("GetNodeExecutionMetrics", matchers...)
	return &MetricsInterface_GetNodeExecutionMetrics{Call: c_call}
}

// GetNodeExecutionMetrics provides a mock function with given fields: ctx, request
func (_m *MetricsInterface) GetNodeExecutionMetrics(ctx context.Context, request admin.NodeExecutionGetMetricsRequest) (*admin.NodeExecutionGetMetricsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *admin.NodeExecutionGetMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, admin.NodeExecutionGetMetricsRequest) *admin.NodeExecutionGetMetricsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionGetMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admin.NodeExecutionGetMetricsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
