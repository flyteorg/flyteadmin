// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	executioncluster "github.com/flyteorg/flyteadmin/pkg/executioncluster"

	mock "github.com/stretchr/testify/mock"
)

// ClusterInterface is an autogenerated mock type for the ClusterInterface type
type ClusterInterface struct {
	mock.Mock
}

type ClusterInterface_GetAllTargets struct {
	*mock.Call
}

func (_m ClusterInterface_GetAllTargets) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetAllTargets {
	return &ClusterInterface_GetAllTargets{Call: _m.Call.Return(_a0)}
}

func (_m *ClusterInterface) OnGetAllTargets() *ClusterInterface_GetAllTargets {
	c_call := _m.On("GetAllTargets")
	return &ClusterInterface_GetAllTargets{Call: c_call}
}

func (_m *ClusterInterface) OnGetAllTargetsMatch(matchers ...interface{}) *ClusterInterface_GetAllTargets {
	c_call := _m.On("GetAllTargets", matchers...)
	return &ClusterInterface_GetAllTargets{Call: c_call}
}

// GetAllTargets provides a mock function with given fields:
func (_m *ClusterInterface) GetAllTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

type ClusterInterface_GetTarget struct {
	*mock.Call
}

func (_m ClusterInterface_GetTarget) Return(_a0 *executioncluster.ExecutionTarget, _a1 error) *ClusterInterface_GetTarget {
	return &ClusterInterface_GetTarget{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ClusterInterface) OnGetTarget(_a0 context.Context, _a1 *executioncluster.ExecutionTargetSpec) *ClusterInterface_GetTarget {
	c_call := _m.On("GetTarget", _a0, _a1)
	return &ClusterInterface_GetTarget{Call: c_call}
}

func (_m *ClusterInterface) OnGetTargetMatch(matchers ...interface{}) *ClusterInterface_GetTarget {
	c_call := _m.On("GetTarget", matchers...)
	return &ClusterInterface_GetTarget{Call: c_call}
}

// GetTarget provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) GetTarget(_a0 context.Context, _a1 *executioncluster.ExecutionTargetSpec) (*executioncluster.ExecutionTarget, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func(context.Context, *executioncluster.ExecutionTargetSpec) *executioncluster.ExecutionTarget); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*executioncluster.ExecutionTarget)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *executioncluster.ExecutionTargetSpec) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ClusterInterface_GetValidTargets struct {
	*mock.Call
}

func (_m ClusterInterface_GetValidTargets) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetValidTargets {
	return &ClusterInterface_GetValidTargets{Call: _m.Call.Return(_a0)}
}

func (_m *ClusterInterface) OnGetValidTargets() *ClusterInterface_GetValidTargets {
	c_call := _m.On("GetValidTargets")
	return &ClusterInterface_GetValidTargets{Call: c_call}
}

func (_m *ClusterInterface) OnGetValidTargetsMatch(matchers ...interface{}) *ClusterInterface_GetValidTargets {
	c_call := _m.On("GetValidTargets", matchers...)
	return &ClusterInterface_GetValidTargets{Call: c_call}
}

// GetValidTargets provides a mock function with given fields:
func (_m *ClusterInterface) GetValidTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}
