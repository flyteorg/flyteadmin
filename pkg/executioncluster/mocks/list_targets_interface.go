// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	executioncluster "github.com/flyteorg/flyteadmin/pkg/executioncluster"

	mock "github.com/stretchr/testify/mock"
)

// ListTargetsInterface is an autogenerated mock type for the ListTargetsInterface type
type ListTargetsInterface struct {
	mock.Mock
}

type ListTargetsInterface_GetAllTargets struct {
	*mock.Call
}

func (_m ListTargetsInterface_GetAllTargets) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetAllTargets {
	return &ListTargetsInterface_GetAllTargets{Call: _m.Call.Return(_a0)}
}

func (_m *ListTargetsInterface) OnGetAllTargets() *ListTargetsInterface_GetAllTargets {
	c_call := _m.On("GetAllTargets")
	return &ListTargetsInterface_GetAllTargets{Call: c_call}
}

func (_m *ListTargetsInterface) OnGetAllTargetsMatch(matchers ...interface{}) *ListTargetsInterface_GetAllTargets {
	c_call := _m.On("GetAllTargets", matchers...)
	return &ListTargetsInterface_GetAllTargets{Call: c_call}
}

// GetAllTargets provides a mock function with given fields:
func (_m *ListTargetsInterface) GetAllTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

type ListTargetsInterface_GetValidTargets struct {
	*mock.Call
}

func (_m ListTargetsInterface_GetValidTargets) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetValidTargets {
	return &ListTargetsInterface_GetValidTargets{Call: _m.Call.Return(_a0)}
}

func (_m *ListTargetsInterface) OnGetValidTargets() *ListTargetsInterface_GetValidTargets {
	c_call := _m.On("GetValidTargets")
	return &ListTargetsInterface_GetValidTargets{Call: c_call}
}

func (_m *ListTargetsInterface) OnGetValidTargetsMatch(matchers ...interface{}) *ListTargetsInterface_GetValidTargets {
	c_call := _m.On("GetValidTargets", matchers...)
	return &ListTargetsInterface_GetValidTargets{Call: c_call}
}

// GetValidTargets provides a mock function with given fields:
func (_m *ListTargetsInterface) GetValidTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}
