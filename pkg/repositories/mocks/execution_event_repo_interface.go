// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyteadmin/pkg/repositories/models"
)

// ExecutionEventRepoInterface is an autogenerated mock type for the ExecutionEventRepoInterface type
type ExecutionEventRepoInterface struct {
	mock.Mock
}

type ExecutionEventRepoInterface_Create struct {
	*mock.Call
}

func (_m ExecutionEventRepoInterface_Create) Return(_a0 error) *ExecutionEventRepoInterface_Create {
	return &ExecutionEventRepoInterface_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionEventRepoInterface) OnCreate(ctx context.Context, input models.ExecutionEvent) *ExecutionEventRepoInterface_Create {
	c_call := _m.On("Create", ctx, input)
	return &ExecutionEventRepoInterface_Create{Call: c_call}
}

func (_m *ExecutionEventRepoInterface) OnCreateMatch(matchers ...interface{}) *ExecutionEventRepoInterface_Create {
	c_call := _m.On("Create", matchers...)
	return &ExecutionEventRepoInterface_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, input
func (_m *ExecutionEventRepoInterface) Create(ctx context.Context, input models.ExecutionEvent) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExecutionEvent) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
