// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import config "github.com/lyft/flyteadmin/pkg/auth/config"
import http "net/http"
import interfaces "github.com/lyft/flyteadmin/pkg/auth/interfaces"
import mock "github.com/stretchr/testify/mock"
import oauth2 "golang.org/x/oauth2"
import oidc "github.com/coreos/go-oidc"
import url "net/url"

// AuthenticationContext is an autogenerated mock type for the AuthenticationContext type
type AuthenticationContext struct {
	mock.Mock
}

// Claims provides a mock function with given fields:
func (_m *AuthenticationContext) Claims() config.Claims {
	ret := _m.Called()

	var r0 config.Claims
	if rf, ok := ret.Get(0).(func() config.Claims); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Claims)
	}

	return r0
}

// CookieManager provides a mock function with given fields:
func (_m *AuthenticationContext) CookieManager() interfaces.CookieHandler {
	ret := _m.Called()

	var r0 interfaces.CookieHandler
	if rf, ok := ret.Get(0).(func() interfaces.CookieHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.CookieHandler)
		}
	}

	return r0
}

// GetBaseURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetBaseURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// GetHTTPClient provides a mock function with given fields:
func (_m *AuthenticationContext) GetHTTPClient() *http.Client {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// GetMetadataURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetMetadataURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// GetUserInfoURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetUserInfoURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// OAuth2Config provides a mock function with given fields:
func (_m *AuthenticationContext) OAuth2Config() *oauth2.Config {
	ret := _m.Called()

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// OidcProvider provides a mock function with given fields:
func (_m *AuthenticationContext) OidcProvider() *oidc.Provider {
	ret := _m.Called()

	var r0 *oidc.Provider
	if rf, ok := ret.Get(0).(func() *oidc.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.Provider)
		}
	}

	return r0
}

// Options provides a mock function with given fields:
func (_m *AuthenticationContext) Options() config.OAuthOptions {
	ret := _m.Called()

	var r0 config.OAuthOptions
	if rf, ok := ret.Get(0).(func() config.OAuthOptions); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.OAuthOptions)
	}

	return r0
}
