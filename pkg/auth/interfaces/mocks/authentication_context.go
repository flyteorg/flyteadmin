// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	config "github.com/flyteorg/flyteadmin/pkg/auth/config"

	interfaces "github.com/flyteorg/flyteadmin/pkg/auth/interfaces"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	oidc "github.com/coreos/go-oidc"

	url "net/url"
)

// AuthenticationContext is an autogenerated mock type for the AuthenticationContext type
type AuthenticationContext struct {
	mock.Mock
}

type AuthenticationContext_Claims struct {
	*mock.Call
}

func (_m AuthenticationContext_Claims) Return(_a0 config.Claims) *AuthenticationContext_Claims {
	return &AuthenticationContext_Claims{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnClaims() *AuthenticationContext_Claims {
	c := _m.On("Claims")
	return &AuthenticationContext_Claims{Call: c}
}

func (_m *AuthenticationContext) OnClaimsMatch(matchers ...interface{}) *AuthenticationContext_Claims {
	c := _m.On("Claims", matchers...)
	return &AuthenticationContext_Claims{Call: c}
}

// Claims provides a mock function with given fields:
func (_m *AuthenticationContext) Claims() config.Claims {
	ret := _m.Called()

	var r0 config.Claims
	if rf, ok := ret.Get(0).(func() config.Claims); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Claims)
	}

	return r0
}

type AuthenticationContext_CookieManager struct {
	*mock.Call
}

func (_m AuthenticationContext_CookieManager) Return(_a0 interfaces.CookieHandler) *AuthenticationContext_CookieManager {
	return &AuthenticationContext_CookieManager{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnCookieManager() *AuthenticationContext_CookieManager {
	c := _m.On("CookieManager")
	return &AuthenticationContext_CookieManager{Call: c}
}

func (_m *AuthenticationContext) OnCookieManagerMatch(matchers ...interface{}) *AuthenticationContext_CookieManager {
	c := _m.On("CookieManager", matchers...)
	return &AuthenticationContext_CookieManager{Call: c}
}

// CookieManager provides a mock function with given fields:
func (_m *AuthenticationContext) CookieManager() interfaces.CookieHandler {
	ret := _m.Called()

	var r0 interfaces.CookieHandler
	if rf, ok := ret.Get(0).(func() interfaces.CookieHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.CookieHandler)
		}
	}

	return r0
}

type AuthenticationContext_GetBaseURL struct {
	*mock.Call
}

func (_m AuthenticationContext_GetBaseURL) Return(_a0 *url.URL) *AuthenticationContext_GetBaseURL {
	return &AuthenticationContext_GetBaseURL{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnGetBaseURL() *AuthenticationContext_GetBaseURL {
	c := _m.On("GetBaseURL")
	return &AuthenticationContext_GetBaseURL{Call: c}
}

func (_m *AuthenticationContext) OnGetBaseURLMatch(matchers ...interface{}) *AuthenticationContext_GetBaseURL {
	c := _m.On("GetBaseURL", matchers...)
	return &AuthenticationContext_GetBaseURL{Call: c}
}

// GetBaseURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetBaseURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

type AuthenticationContext_GetHTTPClient struct {
	*mock.Call
}

func (_m AuthenticationContext_GetHTTPClient) Return(_a0 *http.Client) *AuthenticationContext_GetHTTPClient {
	return &AuthenticationContext_GetHTTPClient{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnGetHTTPClient() *AuthenticationContext_GetHTTPClient {
	c := _m.On("GetHTTPClient")
	return &AuthenticationContext_GetHTTPClient{Call: c}
}

func (_m *AuthenticationContext) OnGetHTTPClientMatch(matchers ...interface{}) *AuthenticationContext_GetHTTPClient {
	c := _m.On("GetHTTPClient", matchers...)
	return &AuthenticationContext_GetHTTPClient{Call: c}
}

// GetHTTPClient provides a mock function with given fields:
func (_m *AuthenticationContext) GetHTTPClient() *http.Client {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

type AuthenticationContext_GetOAuth2MetadataURL struct {
	*mock.Call
}

func (_m AuthenticationContext_GetOAuth2MetadataURL) Return(_a0 *url.URL) *AuthenticationContext_GetOAuth2MetadataURL {
	return &AuthenticationContext_GetOAuth2MetadataURL{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnGetOAuth2MetadataURL() *AuthenticationContext_GetOAuth2MetadataURL {
	c := _m.On("GetOAuth2MetadataURL")
	return &AuthenticationContext_GetOAuth2MetadataURL{Call: c}
}

func (_m *AuthenticationContext) OnGetOAuth2MetadataURLMatch(matchers ...interface{}) *AuthenticationContext_GetOAuth2MetadataURL {
	c := _m.On("GetOAuth2MetadataURL", matchers...)
	return &AuthenticationContext_GetOAuth2MetadataURL{Call: c}
}

// GetOAuth2MetadataURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetOAuth2MetadataURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

type AuthenticationContext_GetOIdCMetadataURL struct {
	*mock.Call
}

func (_m AuthenticationContext_GetOIdCMetadataURL) Return(_a0 *url.URL) *AuthenticationContext_GetOIdCMetadataURL {
	return &AuthenticationContext_GetOIdCMetadataURL{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnGetOIdCMetadataURL() *AuthenticationContext_GetOIdCMetadataURL {
	c := _m.On("GetOIdCMetadataURL")
	return &AuthenticationContext_GetOIdCMetadataURL{Call: c}
}

func (_m *AuthenticationContext) OnGetOIdCMetadataURLMatch(matchers ...interface{}) *AuthenticationContext_GetOIdCMetadataURL {
	c := _m.On("GetOIdCMetadataURL", matchers...)
	return &AuthenticationContext_GetOIdCMetadataURL{Call: c}
}

// GetOIdCMetadataURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetOIdCMetadataURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

type AuthenticationContext_GetUserInfoURL struct {
	*mock.Call
}

func (_m AuthenticationContext_GetUserInfoURL) Return(_a0 *url.URL) *AuthenticationContext_GetUserInfoURL {
	return &AuthenticationContext_GetUserInfoURL{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnGetUserInfoURL() *AuthenticationContext_GetUserInfoURL {
	c := _m.On("GetUserInfoURL")
	return &AuthenticationContext_GetUserInfoURL{Call: c}
}

func (_m *AuthenticationContext) OnGetUserInfoURLMatch(matchers ...interface{}) *AuthenticationContext_GetUserInfoURL {
	c := _m.On("GetUserInfoURL", matchers...)
	return &AuthenticationContext_GetUserInfoURL{Call: c}
}

// GetUserInfoURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetUserInfoURL() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

type AuthenticationContext_OAuth2Config struct {
	*mock.Call
}

func (_m AuthenticationContext_OAuth2Config) Return(_a0 *oauth2.Config) *AuthenticationContext_OAuth2Config {
	return &AuthenticationContext_OAuth2Config{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnOAuth2Config() *AuthenticationContext_OAuth2Config {
	c := _m.On("OAuth2Config")
	return &AuthenticationContext_OAuth2Config{Call: c}
}

func (_m *AuthenticationContext) OnOAuth2ConfigMatch(matchers ...interface{}) *AuthenticationContext_OAuth2Config {
	c := _m.On("OAuth2Config", matchers...)
	return &AuthenticationContext_OAuth2Config{Call: c}
}

// OAuth2Config provides a mock function with given fields:
func (_m *AuthenticationContext) OAuth2Config() *oauth2.Config {
	ret := _m.Called()

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

type AuthenticationContext_OidcProvider struct {
	*mock.Call
}

func (_m AuthenticationContext_OidcProvider) Return(_a0 *oidc.Provider) *AuthenticationContext_OidcProvider {
	return &AuthenticationContext_OidcProvider{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnOidcProvider() *AuthenticationContext_OidcProvider {
	c := _m.On("OidcProvider")
	return &AuthenticationContext_OidcProvider{Call: c}
}

func (_m *AuthenticationContext) OnOidcProviderMatch(matchers ...interface{}) *AuthenticationContext_OidcProvider {
	c := _m.On("OidcProvider", matchers...)
	return &AuthenticationContext_OidcProvider{Call: c}
}

// OidcProvider provides a mock function with given fields:
func (_m *AuthenticationContext) OidcProvider() *oidc.Provider {
	ret := _m.Called()

	var r0 *oidc.Provider
	if rf, ok := ret.Get(0).(func() *oidc.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.Provider)
		}
	}

	return r0
}

type AuthenticationContext_Options struct {
	*mock.Call
}

func (_m AuthenticationContext_Options) Return(_a0 config.OpenIDOptions) *AuthenticationContext_Options {
	return &AuthenticationContext_Options{Call: _m.Call.Return(_a0)}
}

func (_m *AuthenticationContext) OnOptions() *AuthenticationContext_Options {
	c := _m.On("Options")
	return &AuthenticationContext_Options{Call: c}
}

func (_m *AuthenticationContext) OnOptionsMatch(matchers ...interface{}) *AuthenticationContext_Options {
	c := _m.On("Options", matchers...)
	return &AuthenticationContext_Options{Call: c}
}

// Options provides a mock function with given fields:
func (_m *AuthenticationContext) Options() config.OpenIDOptions {
	ret := _m.Called()

	var r0 config.OpenIDOptions
	if rf, ok := ret.Get(0).(func() config.OpenIDOptions); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.OpenIDOptions)
	}

	return r0
}
