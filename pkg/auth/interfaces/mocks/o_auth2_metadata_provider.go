// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
)

// OAuth2MetadataProvider is an autogenerated mock type for the OAuth2MetadataProvider type
type OAuth2MetadataProvider struct {
	mock.Mock
}

type OAuth2MetadataProvider_AuthFuncOverride struct {
	*mock.Call
}

func (_m OAuth2MetadataProvider_AuthFuncOverride) Return(_a0 context.Context, _a1 error) *OAuth2MetadataProvider_AuthFuncOverride {
	return &OAuth2MetadataProvider_AuthFuncOverride{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *OAuth2MetadataProvider) OnAuthFuncOverride(ctx context.Context, fullMethodName string) *OAuth2MetadataProvider_AuthFuncOverride {
	c := _m.On("AuthFuncOverride", ctx, fullMethodName)
	return &OAuth2MetadataProvider_AuthFuncOverride{Call: c}
}

func (_m *OAuth2MetadataProvider) OnAuthFuncOverrideMatch(matchers ...interface{}) *OAuth2MetadataProvider_AuthFuncOverride {
	c := _m.On("AuthFuncOverride", matchers...)
	return &OAuth2MetadataProvider_AuthFuncOverride{Call: c}
}

// AuthFuncOverride provides a mock function with given fields: ctx, fullMethodName
func (_m *OAuth2MetadataProvider) AuthFuncOverride(ctx context.Context, fullMethodName string) (context.Context, error) {
	ret := _m.Called(ctx, fullMethodName)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, fullMethodName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fullMethodName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type OAuth2MetadataProvider_FlyteClient struct {
	*mock.Call
}

func (_m OAuth2MetadataProvider_FlyteClient) Return(_a0 *service.FlyteClientResponse, _a1 error) *OAuth2MetadataProvider_FlyteClient {
	return &OAuth2MetadataProvider_FlyteClient{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *OAuth2MetadataProvider) OnFlyteClient(_a0 context.Context, _a1 *service.FlyteClientRequest) *OAuth2MetadataProvider_FlyteClient {
	c := _m.On("FlyteClient", _a0, _a1)
	return &OAuth2MetadataProvider_FlyteClient{Call: c}
}

func (_m *OAuth2MetadataProvider) OnFlyteClientMatch(matchers ...interface{}) *OAuth2MetadataProvider_FlyteClient {
	c := _m.On("FlyteClient", matchers...)
	return &OAuth2MetadataProvider_FlyteClient{Call: c}
}

// FlyteClient provides a mock function with given fields: _a0, _a1
func (_m *OAuth2MetadataProvider) FlyteClient(_a0 context.Context, _a1 *service.FlyteClientRequest) (*service.FlyteClientResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.FlyteClientResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.FlyteClientRequest) *service.FlyteClientResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.FlyteClientResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.FlyteClientRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type OAuth2MetadataProvider_OAuth2Metadata struct {
	*mock.Call
}

func (_m OAuth2MetadataProvider_OAuth2Metadata) Return(_a0 *service.OAuth2MetadataResponse, _a1 error) *OAuth2MetadataProvider_OAuth2Metadata {
	return &OAuth2MetadataProvider_OAuth2Metadata{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *OAuth2MetadataProvider) OnOAuth2Metadata(_a0 context.Context, _a1 *service.OAuth2MetadataRequest) *OAuth2MetadataProvider_OAuth2Metadata {
	c := _m.On("OAuth2Metadata", _a0, _a1)
	return &OAuth2MetadataProvider_OAuth2Metadata{Call: c}
}

func (_m *OAuth2MetadataProvider) OnOAuth2MetadataMatch(matchers ...interface{}) *OAuth2MetadataProvider_OAuth2Metadata {
	c := _m.On("OAuth2Metadata", matchers...)
	return &OAuth2MetadataProvider_OAuth2Metadata{Call: c}
}

// OAuth2Metadata provides a mock function with given fields: _a0, _a1
func (_m *OAuth2MetadataProvider) OAuth2Metadata(_a0 context.Context, _a1 *service.OAuth2MetadataRequest) (*service.OAuth2MetadataResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.OAuth2MetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.OAuth2MetadataRequest) *service.OAuth2MetadataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.OAuth2MetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.OAuth2MetadataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
