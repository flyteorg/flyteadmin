// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyteadmin/scheduler/repositories/models"
)

// ScheduleEntitiesSnapShotRepoInterface is an autogenerated mock type for the ScheduleEntitiesSnapShotRepoInterface type
type ScheduleEntitiesSnapShotRepoInterface struct {
	mock.Mock
}

type ScheduleEntitiesSnapShotRepoInterface_Read struct {
	*mock.Call
}

func (_m ScheduleEntitiesSnapShotRepoInterface_Read) Return(_a0 models.ScheduleEntitiesSnapshot, _a1 error) *ScheduleEntitiesSnapShotRepoInterface_Read {
	return &ScheduleEntitiesSnapShotRepoInterface_Read{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ScheduleEntitiesSnapShotRepoInterface) OnRead(ctx context.Context) *ScheduleEntitiesSnapShotRepoInterface_Read {
	c_call := _m.On("Read", ctx)
	return &ScheduleEntitiesSnapShotRepoInterface_Read{Call: c_call}
}

func (_m *ScheduleEntitiesSnapShotRepoInterface) OnReadMatch(matchers ...interface{}) *ScheduleEntitiesSnapShotRepoInterface_Read {
	c_call := _m.On("Read", matchers...)
	return &ScheduleEntitiesSnapShotRepoInterface_Read{Call: c_call}
}

// Read provides a mock function with given fields: ctx
func (_m *ScheduleEntitiesSnapShotRepoInterface) Read(ctx context.Context) (models.ScheduleEntitiesSnapshot, error) {
	ret := _m.Called(ctx)

	var r0 models.ScheduleEntitiesSnapshot
	if rf, ok := ret.Get(0).(func(context.Context) models.ScheduleEntitiesSnapshot); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ScheduleEntitiesSnapshot)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ScheduleEntitiesSnapShotRepoInterface_Write struct {
	*mock.Call
}

func (_m ScheduleEntitiesSnapShotRepoInterface_Write) Return(_a0 error) *ScheduleEntitiesSnapShotRepoInterface_Write {
	return &ScheduleEntitiesSnapShotRepoInterface_Write{Call: _m.Call.Return(_a0)}
}

func (_m *ScheduleEntitiesSnapShotRepoInterface) OnWrite(ctx context.Context, input models.ScheduleEntitiesSnapshot) *ScheduleEntitiesSnapShotRepoInterface_Write {
	c_call := _m.On("Write", ctx, input)
	return &ScheduleEntitiesSnapShotRepoInterface_Write{Call: c_call}
}

func (_m *ScheduleEntitiesSnapShotRepoInterface) OnWriteMatch(matchers ...interface{}) *ScheduleEntitiesSnapShotRepoInterface_Write {
	c_call := _m.On("Write", matchers...)
	return &ScheduleEntitiesSnapShotRepoInterface_Write{Call: c_call}
}

// Write provides a mock function with given fields: ctx, input
func (_m *ScheduleEntitiesSnapShotRepoInterface) Write(ctx context.Context, input models.ScheduleEntitiesSnapshot) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ScheduleEntitiesSnapshot) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
